{"mappings":"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","sources":["%3Cinput%20css%20VXvyRu%3E","src/scss/base/_base.scss","src/scss/Layout/_container.scss","src/scss/Layout/_main__component.scss","node_modules/include-media/dist/_include-media.scss","src/scss/Layout/_header.scss","src/scss/components/_theme__button.scss","src/scss/components/_form__search.scss","src/scss/Layout/_grid.scss","src/scss/components/spinner.scss"],"sourcesContent":["@import \"https://fonts.googleapis.com/css2?family=Space+Mono:wght@400;700&display=swap\";\n:root {\n}\n:root *,\n:root *:before,\n:root *:after {\n  margin: 0;\n  padding: 0;\n}\nbody {\n  background-color: #f6f8ff;\n  font-family: \"Space Mono\", monospace;\n  color: #4b6a9b;\n  fill: currentColor;\n}\nbody.dark {\n  background-color: #141d2f;\n  font-family: \"Space Mono\", monospace;\n  color: #ffffff;\n  fill: currentColor;\n}\nh1 {\n  font-size: 26px;\n  line-height: 38px;\n  font-weight: bold;\n  color: #2b3442;\n}\nh1.dark {\n  color: #ffffff;\n}\nh2 {\n  font-size: 22px;\n  line-height: 33px;\n  font-weight: bold;\n}\nh3 {\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: normal;\n}\n.container {\n  width: 100vw;\n  height: 100vh;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n.main__component {\n  width: 730px;\n  display: flex;\n  flex-flow: column;\n}\n@media (max-width: 1023px) {\n  .main__component {\n    width: 573px;\n  }\n}\n@media (max-width: 767px) {\n  .main__component {\n    width: 327px;\n  }\n}\n.title__container {\n  display: flex;\n  flex-flow: row;\n  justify-content: space-between;\n  font-size: 26px;\n  font-weight: bold;\n  margin-bottom: 36px;\n}\n.toggle__theme__dark {\n  color: #697c9a;\n  font-weight: regular;\n  font-size: 15px;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  transition: color 0.15s ease-in-out;\n}\n.toggle__theme__dark svg {\n  margin: 0 0 0 16px;\n  transition: fill 0.15s ease-in-out;\n}\n.toggle__theme__dark:hover {\n  color: #2b3442;\n}\n.toggle__theme__dark:hover > svg {\n  fill: #2b3442;\n}\n.toggle__theme__dark.dark {\n  color: #ffffff;\n}\n.toggle__theme__dark.dark svg {\n  margin: 0 0 0 16px;\n  transition: fill 0.15s ease-in-out;\n}\n.toggle__theme__dark.dark:hover {\n  color: #90a4d4;\n}\n.toggle__theme__dark.dark:hover > svg {\n  fill: #90a4d4;\n}\n.search {\n  background-color: #fefefe;\n  border-radius: 15px;\n  height: 69px;\n  color: #4b6a9b;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  margin-bottom: 1.5rem;\n  box-shadow: 0px 16px 30px -10px rgba(70, 96, 187, 0.198567);\n}\n@media (max-width: 767px) {\n  .search {\n    width: 327px;\n    height: 60px;\n  }\n}\n.search input {\n  font-family: \"space mono\";\n  font-weight: regular;\n  color: inherit;\n  caret-color: #0079ff;\n  width: 100%;\n  font-size: 18px;\n  font-weight: regular;\n  border: none;\n  outline: 0;\n}\n@media (max-width: 767px) {\n  .search input {\n    font-size: 13px;\n  }\n}\n.search button {\n  cursor: pointer;\n  font-family: \"space mono\";\n  font-weight: bold;\n  font-size: 16px;\n  background-color: #0079ff;\n  color: #fefefe;\n  flex-shrink: 0;\n  border-radius: 10px;\n  border: none;\n  width: 106px;\n  height: 50px;\n  margin-right: 10px;\n  transition: background-color 0.15s ease-in-out;\n}\n@media (max-width: 767px) {\n  .search button {\n    width: 84px;\n    height: 46px;\n    font-size: 14px;\n    line-height: 21px;\n  }\n}\n.search button:hover {\n  background-color: #60abff;\n}\n.search.dark {\n  background-color: #1e2a47;\n  color: #ffffff;\n}\n.search.dark input {\n  background-color: #1e2a47;\n}\n.search__icon {\n  margin-left: 32px;\n  margin-right: 1.5rem;\n}\n@media (max-width: 767px) {\n  .search__icon {\n    margin-left: 16px;\n    margin-right: 0.5rem;\n    letter-spacing: 1px;\n  }\n}\n.search__error {\n  white-space: nowrap;\n  font-size: 15px;\n  font-weight: bold;\n  margin-right: 1.5rem;\n  color: #f74646;\n  transition: opacity 0.15s ease-in-out;\n}\n.grid {\n  display: grid;\n  grid-template-columns: min-content auto auto;\n  background-color: #fefefe;\n  column-gap: 37px;\n  border-radius: 15px;\n  background: #fefefe;\n  box-shadow: 0px 16px 30px -10px rgba(70, 96, 187, 0.198567);\n  padding: 3rem;\n  transition: height 0.15s ease-in-out;\n}\n@media (max-width: 767px) {\n  .grid {\n    padding: 2rem 1.5rem 3rem 1.5rem;\n    font-size: 13px;\n    column-gap: 19px;\n  }\n}\n.grid.dark {\n  background-color: #1e2a47;\n}\n.avatar {\n  height: 117px;\n  border-radius: 100px;\n  grid-row: 1/3;\n}\n@media (max-width: 767px) {\n  .avatar {\n    height: 70px;\n  }\n}\n@media (max-width: 767px) {\n  .name__container {\n    grid-column: 2/4;\n  }\n}\n.user__name {\n  transform: translateY(-4px);\n}\n@media (max-width: 767px) {\n  .user__name {\n    font-size: 16px;\n    line-height: 24px;\n  }\n}\n.user__at {\n  color: #0079ff;\n}\n@media (max-width: 767px) {\n  .user__at {\n    font-size: 13px;\n  }\n}\n.user__join__date {\n  font-size: 15px;\n  line-height: 22px;\n  justify-self: flex-end;\n}\n@media (max-width: 1023px) {\n  .user__join__date {\n    grid-row: 2/3;\n    grid-column: 2/4;\n    justify-self: flex-start;\n  }\n}\n@media (max-width: 767px) {\n  .user__join__date {\n    font-size: 13px;\n  }\n}\n.user__description {\n  font-weight: 400;\n  font-size: 15px;\n  line-height: 25px;\n  margin: 20px 0 0 0px;\n  grid-column: 2/4;\n}\n@media (max-width: 1023px) {\n  .user__description {\n    grid-column: 1/4;\n  }\n}\n@media (max-width: 767px) {\n  .user__description {\n    font-size: 13px;\n    line-height: 25px;\n  }\n}\n.user__data {\n  border-radius: 10px;\n  grid-column: 2/4;\n  background-color: #f6f8ff;\n  display: flex;\n  justify-content: space-around;\n  padding: 15px 32px 17px;\n  margin: 2rem 0 0 0px;\n}\n@media (max-width: 1023px) {\n  .user__data {\n    grid-column: 1/4;\n  }\n}\n@media (max-width: 767px) {\n  .user__data {\n    justify-content: space-evenly;\n    padding: 18px 15px 19px 15px;\n  }\n}\n.user__data__container {\n  display: flex;\n  flex-flow: column;\n}\n@media (max-width: 767px) {\n  .user__data__container {\n    align-items: center;\n  }\n}\n.user__data__title {\n  font-family: Space Mono;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 13px;\n  line-height: 19px;\n}\n@media (max-width: 767px) {\n  .user__data__title {\n    font-size: 11px;\n  }\n}\n.user__data__values {\n  font-family: Space Mono;\n  font-style: normal;\n  font-weight: bold;\n  font-size: 22px;\n  line-height: 33px;\n  color: #2b3442;\n}\n@media (max-width: 767px) {\n  .user__data__values {\n    font-size: 16px;\n    line-height: 24px;\n  }\n}\n.user__data.dark {\n  background-color: #141d2f;\n}\n.user__data__values.dark {\n  color: #ffffff;\n}\n.repos {\n  margin-left: -2.5rem;\n}\n@media (max-width: 767px) {\n  .repos {\n    margin-left: 0;\n  }\n}\n.user__links {\n  font-family: \"Space Mono\", monospace;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 15px;\n  line-height: 22px;\n  word-break: break-word;\n  grid-column: 2/4;\n  margin: 37px 0 0 0px;\n  display: grid;\n  column-gap: 3rem;\n  row-gap: 1rem;\n  grid-template-columns: 1fr 1fr;\n}\n@media (max-width: 1023px) {\n  .user__links {\n    grid-column: 1/4;\n  }\n}\n@media (max-width: 767px) {\n  .user__links {\n    display: flex;\n    flex-flow: column;\n    font-size: 13px;\n    line-height: 19px;\n  }\n}\n.user__links a {\n  cursor: pointer;\n  text-decoration: none;\n  color: inherit;\n}\n.user__links a:hover > span {\n  text-decoration: underline;\n}\n.link {\n  display: flex;\n  align-items: center;\n  position: relative;\n}\n.link span {\n  position: absolute;\n  left: 2.3rem;\n}\n.link.disabled {\n  pointer-events: none;\n  opacity: 0.5;\n}\n.spinner {\n  font-size: 5rem;\n  position: relative;\n  left: 17rem;\n  animation: rotate 2s infinite linear;\n}\n@keyframes rotate {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n/*# sourceMappingURL=index.38efe80a.css.map */\n",":root {\r\n  @import url(\"https://fonts.googleapis.com/css2?family=Space+Mono:wght@400;700&display=swap\");\r\n\r\n  *,\r\n  *:before,\r\n  *:after {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  @include media(\"<tablet\") {\r\n    // font-size: 30%;\r\n  }\r\n}\r\nbody {\r\n  background-color: $bg--light;\r\n  font-family: \"Space Mono\", monospace;\r\n  color: $links-and-date--light;\r\n  fill: currentColor;\r\n}\r\nbody.dark {\r\n  background-color: $bg--dark;\r\n  font-family: \"Space Mono\", monospace;\r\n  color: $title-and-hover--dark;\r\n  fill: currentColor;\r\n}\r\nh1 {\r\n  font-size: 26px;\r\n  line-height: 38px;\r\n  font-weight: bold;\r\n  color: $title-and-hover--light;\r\n}\r\nh1.dark {\r\n  color: $title-and-hover--dark;\r\n}\r\nh2 {\r\n  font-size: 22px;\r\n  line-height: 33px;\r\n  font-weight: bold;\r\n}\r\nh3 {\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  font-weight: normal;\r\n}\r\n",".container {\r\n  width: 100vw;\r\n  height: 100vh;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n",".main__component {\r\n  width: 730px;\r\n  display: flex;\r\n  flex-flow: column;\r\n  @include media(\"<desktop\") {\r\n    width: 573px;\r\n  }\r\n  @include media(\"<tablet\") {\r\n    width: 327px;\r\n  }\r\n}\r\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Kitty Giraudel (@kittygiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 375px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Kitty Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n",".title__container {\r\n  display: flex;\r\n  flex-flow: row;\r\n  justify-content: space-between;\r\n  font-size: 26px;\r\n  font-weight: bold;\r\n  margin-bottom: 36px;\r\n}\r\n",".toggle__theme__dark {\r\n  color: $grey-blue--light;\r\n  font-weight: regular;\r\n  font-size: 15px;\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  transition: color 0.15s ease-in-out;\r\n\r\n  svg {\r\n    margin: 0 0 0 16px;\r\n    transition: fill 0.15s ease-in-out;\r\n  }\r\n  &:hover {\r\n    color: $title-and-hover--light;\r\n  }\r\n  &:hover > svg {\r\n    fill: $title-and-hover--light;\r\n  }\r\n}\r\n.toggle__theme__dark.dark {\r\n  color: $title-and-hover--dark;\r\n\r\n  svg {\r\n    margin: 0 0 0 16px;\r\n    transition: fill 0.15s ease-in-out;\r\n  }\r\n  &:hover {\r\n    color: $grey-blue--dark;\r\n  }\r\n  &:hover > svg {\r\n    fill: $grey-blue--dark;\r\n  }\r\n}\r\n\r\n// .toggle__theme:hover > svg *,\r\n// .toggle__theme:hover {\r\n//   color: $dark-grey--primary;\r\n//   fill: $dark-grey--primary;\r\n// }\r\n",".search {\r\n  background-color: $card-bg--light;\r\n  border-radius: 15px;\r\n  height: 69px;\r\n  @include media(\"<tablet\") {\r\n    width: 327px;\r\n    height: 60px;\r\n  }\r\n  color: $links-and-date--light;\r\n  overflow: hidden;\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n\r\n  box-shadow: 0px 16px 30px -10px rgba(70, 96, 187, 0.198567);\r\n\r\n  input {\r\n    font-family: \"space mono\";\r\n    font-weight: regular;\r\n    color: inherit;\r\n    caret-color: $blue-accent;\r\n    width: 100%;\r\n\r\n    font-size: 18px;\r\n    @include media(\"<tablet\") {\r\n      font-size: 13px;\r\n    }\r\n    font-weight: regular;\r\n    border: none;\r\n    outline: 0;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    font-family: \"space mono\";\r\n    font-weight: bold;\r\n    font-size: 16px;\r\n    background-color: $blue-accent;\r\n    color: $card-bg--light;\r\n    flex-shrink: 0;\r\n    border-radius: 10px;\r\n    border: none;\r\n    width: 106px;\r\n    height: 50px;\r\n    margin-right: 10px;\r\n    @include media(\"<tablet\") {\r\n      width: 84px;\r\n      height: 46px;\r\n      font-size: 14px;\r\n      line-height: 21px;\r\n    }\r\n    transition: background-color 0.15s ease-in-out;\r\n    &:hover {\r\n      background-color: #60abff;\r\n    }\r\n  }\r\n}\r\n.search.dark {\r\n  background-color: $card-bg--dark;\r\n  color: $title-and-hover--dark;\r\n  input {\r\n    background-color: $card-bg--dark;\r\n  }\r\n}\r\n.search__icon {\r\n  margin-left: 32px;\r\n  margin-right: 1.5rem;\r\n  @include media(\"<tablet\") {\r\n    margin-left: 16px;\r\n    margin-right: 0.5rem;\r\n    letter-spacing: 1px;\r\n  }\r\n}\r\n.search__error {\r\n  white-space: nowrap;\r\n  font-size: 15px;\r\n  font-weight: bold;\r\n  margin-right: 1.5rem;\r\n  color: #f74646;\r\n  transition: opacity 0.15s ease-in-out;\r\n}\r\n",".grid {\r\n  display: grid;\r\n  grid-template-columns: min-content auto auto;\r\n  background-color: $card-bg--light;\r\n  column-gap: 37px;\r\n\r\n  border-radius: 15px;\r\n  background: #fefefe;\r\n  box-shadow: 0px 16px 30px -10px rgba(70, 96, 187, 0.198567);\r\n  padding: 3rem;\r\n  transition: height 0.15s ease-in-out;\r\n  @include media(\"<tablet\") {\r\n    padding: 2rem 1.5rem 3rem 1.5rem;\r\n    font-size: 13px;\r\n    column-gap: 19px;\r\n  }\r\n}\r\n.grid.dark {\r\n  background-color: $card-bg--dark;\r\n}\r\n.avatar {\r\n  height: 117px;\r\n  border-radius: 100px;\r\n  grid-row: 1 / 3;\r\n  @include media(\"<tablet\") {\r\n    height: 70px;\r\n  }\r\n}\r\n.name__container {\r\n  @include media(\"<tablet\") {\r\n    grid-column: 2 / 4;\r\n  }\r\n}\r\n.user__name {\r\n  // margin: 0 0 0 37px;\r\n  // max-width: 12rem;\r\n  // text-overflow: \"\";\r\n  transform: translateY(-4px);\r\n  @include media(\"<tablet\") {\r\n    font-size: 16px;\r\n    line-height: 24px;\r\n  }\r\n}\r\n.user__at {\r\n  // margin: 0 0 0 37px;\r\n\r\n  color: $blue-accent;\r\n  @include media(\"<tablet\") {\r\n    font-size: 13px;\r\n  }\r\n}\r\n.user__join__date {\r\n  font-size: 15px;\r\n  line-height: 22px;\r\n\r\n  justify-self: flex-end;\r\n  @include media(\"<desktop\") {\r\n    grid-row: 2 / 3;\r\n    grid-column: 2 / 4;\r\n    justify-self: flex-start;\r\n  }\r\n  @include media(\"<tablet\") {\r\n    font-size: 13px;\r\n  }\r\n}\r\n.user__description {\r\n  font-weight: 400;\r\n  font-size: 15px;\r\n\r\n  line-height: 25px;\r\n  margin: 20px 0 0 0px;\r\n\r\n  grid-column: 2 / 4;\r\n  @include media(\"<desktop\") {\r\n    grid-column: 1 / 4;\r\n  }\r\n  @include media(\"<tablet\") {\r\n    font-size: 13px;\r\n    line-height: 25px;\r\n  }\r\n}\r\n\r\n.user__data {\r\n  border-radius: 10px;\r\n  grid-column: 2 / 4;\r\n  @include media(\"<desktop\") {\r\n    grid-column: 1 / 4;\r\n  }\r\n  background-color: $bg--light;\r\n  display: flex;\r\n  justify-content: space-around;\r\n\r\n  padding: 15px 32px 17px;\r\n  margin: 2rem 0 0 0px;\r\n  @include media(\"<tablet\") {\r\n    justify-content: space-evenly;\r\n    padding: 18px 15px 19px 15px;\r\n  }\r\n\r\n  &__container {\r\n    display: flex;\r\n    flex-flow: column;\r\n    @include media(\"<tablet\") {\r\n      align-items: center;\r\n    }\r\n  }\r\n\r\n  &__title {\r\n    font-family: Space Mono;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 13px;\r\n    line-height: 19px;\r\n    @include media(\"<tablet\") {\r\n      font-size: 11px;\r\n    }\r\n  }\r\n  &__values {\r\n    font-family: Space Mono;\r\n    font-style: normal;\r\n    font-weight: bold;\r\n    font-size: 22px;\r\n    line-height: 33px;\r\n    color: $title-and-hover--light;\r\n    @include media(\"<tablet\") {\r\n      font-size: 16px;\r\n      line-height: 24px;\r\n    }\r\n  }\r\n}\r\n.user__data.dark {\r\n  background-color: $bg--dark;\r\n}\r\n.user__data__values.dark {\r\n  color: $title-and-hover--dark;\r\n}\r\n.repos {\r\n  margin-left: -2.5rem;\r\n  @include media(\"<tablet\") {\r\n    margin-left: 0;\r\n  }\r\n}\r\n\r\n.user__links {\r\n  font-family: \"Space Mono\", monospace;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 15px;\r\n  line-height: 22px;\r\n  word-break: break-word;\r\n\r\n  grid-column: 2 / 4;\r\n\r\n  @include media(\"<desktop\") {\r\n    grid-column: 1 / 4;\r\n  }\r\n  @include media(\"<tablet\") {\r\n    display: flex;\r\n    flex-flow: column;\r\n    font-size: 13px;\r\n    line-height: 19px;\r\n  }\r\n  margin: 37px 0 0 0px;\r\n  display: grid;\r\n  column-gap: 3rem;\r\n  row-gap: 1rem;\r\n\r\n  grid-template-columns: 1fr 1fr;\r\n  a {\r\n    cursor: pointer;\r\n    text-decoration: none;\r\n    color: inherit;\r\n\r\n    &:hover > span {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n}\r\n.link {\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  span {\r\n    position: absolute;\r\n    left: 2.3rem;\r\n  }\r\n}\r\n.link.disabled {\r\n  pointer-events: none;\r\n  opacity: 0.5;\r\n}\r\n",".spinner {\r\n  font-size: 5rem;\r\n  position: relative;\r\n  left: 17rem;\r\n  animation: rotate 2s infinite linear;\r\n}\r\n\r\n@keyframes rotate {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"index.38efe80a.css.map"}